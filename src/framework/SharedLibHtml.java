package framework;

import junit.framework.Assert;
import org.apache.commons.io.FileUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.json.JSONException;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.Select;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.TimeUnit;


public class SharedLibHtml extends SendEmailHtml {

	public  String browser;
	public static final String newLine = System.getProperty("line.separator");
	public static final String elementNotPresent = "Element not present :";
	public static final String elementNotEnabled = "Element not enabled :";
	public static final String alertAppears = "Alert popup appears containing below message :";
	public static List<String> elementStatusAry = new LinkedList<String>();
	public static List<String> tcIdAllAry = new LinkedList<String>();
	public static List<String> tcIdFailAry = new LinkedList<String>();
	public static String EMAIL_ARGUMENTS_DELIMITER = "<->";
	public static int isSendEmailFlag = 1;
	public static String BR = "<br>";
	public static String emailMsgTestTitle;
	public static String emailSubjectSufix;
	public static String screenShotCaptureFileName = "";
	public static String emailMsgPrefixTxt = "Dear All ," + BR + BR +
			"Automation suite to test ";
	public static String emailBodySufifixTxt = "has executed and found the following test result." + BR;
	public static String emailMsgSufixTxt = BR + BR + BR + " Thanks & Regards, " + BR + " Software Test developer Team - HealthKart" + BR;
	public static String emailMsgAutoGeneratedTxt = BR + BR + "*** This is an automatically generated email, please do not reply ***";
	public static String emailMsgAssistanceTxt = BR + BR + "For any assistance please contact at nitin.wadhawan@healthkart.com";
	public static String[] emailIdList ={"nitin.wadhawan@healthkart.com"};
	public static String screenShotFilePathDir = "AutomationSuiteScreenShotCaptured\\";
	public static String assertionMsg = "Element not present";
	public static String globalTcId;
	public static WebDriver driver;
	//public static WebDriver driver = new HtmlUnitDriver();

	public static void main(String[] args) throws IOException, JSONException {
		// TODO Auto-generated method stub

	}

	public static void assertElementPresent(String elementXpath, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, String tcId) {
		Assert.assertEquals(elementNotPresent, true, verifyIsExist(elementXpath, elementObjectName, currentPage, currentUrl, driver, tcId));
	}

	public static void assertElementEnabled(String elementXpath, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, String tcId) {
		Assert.assertEquals(elementNotEnabled, true, verifyIsEnabled(elementXpath, elementObjectName, currentPage, currentUrl, driver, tcId));
	}

	public static boolean isLinkExist(String linkText, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, String tcId) {
		System.out.println("here in element exist function");
		boolean isExist = driver.findElements(By.linkText(linkText)).size() != 0;
		if (!isExist) {
			tcIdFailAry.add(tcId);
			String elementStatus = tcId + EMAIL_ARGUMENTS_DELIMITER + "Fail" + EMAIL_ARGUMENTS_DELIMITER + currentPage + EMAIL_ARGUMENTS_DELIMITER + currentUrl + EMAIL_ARGUMENTS_DELIMITER + elementNotPresent + elementObjectName;
			elementStatusAry.add(elementStatus);
			String dateTimeStr = getCurrentDateTime();
			try {
				captureScreenShot(driver, tcId + "-" + dateTimeStr + "-elementNotFound");
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			System.out.println("capture function called--->" + tcId + "-" + dateTimeStr + "-elementNotFound");
			//assertElementPresent(linkText, elementObjectName, currentPage, currentUrl, driver, tcId);
			try {
				captureScreenShot(driver, tcId + "-" + dateTimeStr + "-elementNotFound");

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			System.out.println("element exist");
		}
		return isExist;
	}

	public static boolean isElementExist(String elementXpath, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, String tcId) {
		//System.out.println("here in element exist function");
		boolean isExist = driver.findElements(By.xpath(elementXpath)).size() != 0;
		if (!isExist) {
			tcIdFailAry.add(tcId);
			String elementStatus = tcId + EMAIL_ARGUMENTS_DELIMITER + "Fail" + EMAIL_ARGUMENTS_DELIMITER + currentPage + EMAIL_ARGUMENTS_DELIMITER + currentUrl + EMAIL_ARGUMENTS_DELIMITER + elementNotPresent + elementObjectName;
			elementStatusAry.add(elementStatus);
			String dateTimeStr = getCurrentDateTime();
			try {
				captureScreenShot(driver, tcId + "-" + dateTimeStr + "-elementNotFound");
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			System.out.println("capture function called--->" + tcId + "-" + dateTimeStr + "-elementNotFound");
			assertElementPresent(elementXpath, elementObjectName, currentPage, currentUrl, driver, tcId);
			try {
				captureScreenShot(driver, tcId + "-" + dateTimeStr + "-elementNotFound");

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			System.out.println("element exist");
		}
		return isExist;
	}

	public static boolean getTextMatch(String elementXpath, String elementObjectName, String currentPage, String currentUrl, String expectedText, WebDriver driver, String tcId) {
		if (isElementExist(elementXpath, elementObjectName, currentPage, currentUrl, driver, tcId)) {
			String actualText = driver.findElement(By.xpath(elementXpath)).getText();
			if (expectedText.equalsIgnoreCase(actualText)) {
				return true;
			} else {
				tcIdFailAry.add(tcId);
				String elementStatus = tcId + EMAIL_ARGUMENTS_DELIMITER + "Fail" + EMAIL_ARGUMENTS_DELIMITER + currentPage +
						EMAIL_ARGUMENTS_DELIMITER + currentUrl + EMAIL_ARGUMENTS_DELIMITER + "'" + actualText + "'" + " not equal to " + "'" + expectedText + "'" + " for element " + "'" + elementObjectName + "'"
						+ BR + "    Expected :" + expectedText + "  Actual: " + actualText;
				elementStatusAry.add(elementStatus);
			}
		}
		return false;
	}

	public static String getText(String elementXpath, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, String tcId) {
		String actualText = "";
		if (isElementExist(elementXpath, elementObjectName, currentPage, currentUrl, driver, tcId)) {
			actualText = driver.findElement(By.xpath(elementXpath)).getText();
			return actualText;
		}
		return actualText;
	}

	public static void Click(String elementXpath, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, String tcId) throws IOException {
		if (isElementExist(elementXpath, elementObjectName, currentPage, currentUrl, driver, tcId)) {
			driver.findElement(By.xpath(elementXpath)).click();
			checkHttpResponse(driver.getCurrentUrl());
		}
	}

	public static void ClickByLinkText(String linkText, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, String tcId) throws IOException {
		if (isLinkExist(linkText, elementObjectName, currentPage, currentUrl, driver, tcId)) {
			driver.findElement(By.linkText(linkText)).click();
			checkHttpResponse(driver.getCurrentUrl());
		}
	}

	public static void sendKeys(String elementXpath, String elementObjectName, String currentPage, String currentUrl, String value, WebDriver driver, String tcId) {
		if (isElementExist(elementXpath, elementObjectName, currentPage, currentUrl, driver, tcId)) {
			driver.findElement(By.xpath(elementXpath)).sendKeys(value);
		}
	}

	public static boolean isEnabled(String elementXpath, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, String tcId) {
		if (isElementExist(elementXpath, elementObjectName, currentPage, currentUrl, driver, tcId)) {
			if (!driver.findElement(By.xpath(elementXpath)).isEnabled()) {
				tcIdFailAry.add(tcId);
				String elementStatus = tcId + EMAIL_ARGUMENTS_DELIMITER + "Fail" + EMAIL_ARGUMENTS_DELIMITER + currentPage + EMAIL_ARGUMENTS_DELIMITER + currentUrl + EMAIL_ARGUMENTS_DELIMITER + elementNotEnabled + elementObjectName;
				elementStatusAry.add(elementStatus);
				assertElementEnabled(elementXpath, elementObjectName, currentPage, currentUrl, driver, tcId);
				return false;
			}
		}
		return true;
	}

	public static void selectDropdownElementByVisibleText(String elementXpath, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, String visibleText, String tcId) {
		if (isElementExist(elementXpath, elementObjectName, currentPage, currentUrl, driver, tcId)) {
			System.err.println("Yes elemt exist-->" + elementObjectName + "----->" + elementXpath + "--->value-->" + visibleText);
			Select sel = new Select(driver.findElement(By.xpath(elementXpath)));
			sel.selectByVisibleText(visibleText);
		}
	}

	public static void selectDropdownElementByIndex(String elementXpath, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, int index, String tcId) {
		if (isElementExist(elementXpath, elementObjectName, currentPage, currentUrl, driver, tcId)) {
			Select sel = new Select(driver.findElement(By.xpath(elementXpath)));
			sel.selectByIndex(index);
		}
	}

	public static boolean verifyIsExist(String elementXpath, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, String tcId) {
		return driver.findElements(By.xpath(elementXpath)).size() != 0;
	}

	public static boolean verifyIsEnabled(String elementXpath, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, String tcId) {
		return driver.findElement(By.xpath(elementXpath)).isEnabled();
	}

	public static void shareResult() throws IOException {
		System.err.println("--------shared result called---------------->Size of Element Status array-->" + elementStatusAry.size());
		System.out.println(Arrays.asList(elementStatusAry));

		if (elementStatusAry.size() > 0) {
			SendEmailHtml.emailMsgTxt = "";
			for (int k = 0; k < elementStatusAry.size(); k++) {
				System.out.println("Inside loop");
				isSendEmailFlag++;
				String msgBody = "";
				String[] splitAry = elementStatusAry.get(k).split(EMAIL_ARGUMENTS_DELIMITER);
				msgBody = BR + msgBody + "     Test Case Id: " + splitAry[0] + BR;
				msgBody = msgBody + "     URL: " + splitAry[3] + BR;
				msgBody = msgBody + "     Remarks:  " + splitAry[4] + BR;
				msgBody = msgBody + "     Page Name: " + splitAry[2] + BR;
				msgBody = msgBody + "     Status: " + splitAry[1] + BR;
				if (splitAry.length > 5)
					msgBody = msgBody + "     Error Message:  " + splitAry[5] + BR;
				SendEmailHtml.emailMsgTxt = msgBody;
			}
			String dateTimeStr = getCurrentDateTime();
			SendEmailHtml.emailMsgTxt = SendEmailHtml.emailMsgTxt + BR + "Execution Time: " + dateTimeStr + BR;
			SendEmailHtml.emailSubjectTxt = "Automation Test Suite Result: " + emailSubjectSufix;
			SendEmailHtml.emailMsgTxt = emailMsgPrefixTxt + emailMsgTestTitle + emailBodySufifixTxt + SendEmailHtml.emailMsgTxt + emailMsgAssistanceTxt + emailMsgSufixTxt + emailMsgAutoGeneratedTxt;
			SendEmailHtml.emailList = emailIdList;

			if (isSendEmailFlag > 0) {
				SendEmailHtml.pushMail();
			} else
				System.out.println("No need to send mail");
		}


		//String fileName = globalTcId+"-transactionFlowBy-"+dateTimeStr;
		//captureScreenShot(driver, fileName);
		//driver.quit();
	}

	public static String getCurrentDateTime() {
		DateFormat DF = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
		Date dat = new Date();
		String dateStr = DF.format(dat);
		return dateStr;
	}

	public static String getCurrentDateOnly() {
		DateFormat DF = new SimpleDateFormat("yyyy-MM-dd");
		Date dat = new Date();
		String dateStr = DF.format(dat);
		return dateStr;
	}

	public static int getNumberOfElements(String elementXpath, String elementObjectName, String currentPage, String currentUrl, WebDriver driver, String tcId) {
		int num = 0;
		if (isElementExist(elementXpath, elementObjectName, currentPage, currentUrl, driver, tcId)) {
			List<WebElement> eles = driver.findElements(By.xpath(elementXpath));
			for (WebElement getNum : eles) {
				num++;
			}
		}
		return num;

	}

	public static void captureScreenShot(WebDriver driver, String fileName) throws IOException {
		captureScreenShotFile = "";
		System.out.println("yes capture called-->" + fileName);
		String strDirectory = screenShotFilePathDir + getCurrentDateOnly();
		System.out.println(strDirectory);
		//fileName = "elementNofound";
		File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		String path = System.getProperty("user.dir");
		//String path = "C:\\automation";
		new File(strDirectory).mkdir();
		String fullpath = path + File.separator + strDirectory;
		FileUtils.copyFile(scrFile, new File(fullpath + "\\" + fileName + ".jpg"));
		String screenShotLocation = fullpath + "\\" + fileName;
		//System.out.println("Screenshot captured Location is: " +path+ "\nFilename is:" +fileName+".png");
		System.out.println("Screenshot captured Location is: " + fullpath + File.separator + fileName + ".jpg");
		captureScreenShotFile = fullpath + File.separator + fileName + ".jpg";
		System.out.println("final location is-->" + captureScreenShotFile);
		attachmentFileName = fileName + ".jpg";
		attachmentArray.add(captureScreenShotFile);
	}

	public static void openBrowser(String AppURL, String BrowserName) {
		if (BrowserName.equalsIgnoreCase("firefox")) {
			driver = new FirefoxDriver();
			// driver=new HtmlUnitDriver();
			driver.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);
			driver.manage().window().maximize();
			driver.get(AppURL);

		} else if (BrowserName.equalsIgnoreCase("IE")) {
			System.setProperty("webdriver.ie.driver", "D:\\SeleniumUse\\IEDriverServer.exe");
			DesiredCapabilities cap = DesiredCapabilities.internetExplorer();
			cap.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
			driver = new InternetExplorerDriver(cap);
			driver.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);
			driver.manage().window().maximize();
			driver.get(AppURL);
		} else if (BrowserName.equals("chrome")) {
			System.setProperty("webdriver.chrome.driver", "C:\\Users\\WINQA\\workspace\\NewHkAutomationSuite\\BrowserDrivers\\chromedriver.exe");
			driver = new ChromeDriver();
			driver.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS);
			driver.manage().window().maximize();
			driver.get(AppURL);
		} else {
			driver = new FirefoxDriver();
			driver.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);
			driver.manage().window().maximize();
			driver.get(AppURL);
		}
	}

	public static boolean checkHttpResponse(String testUrl) throws IOException {
		URL url = new URL(testUrl);
		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
		connection.setRequestMethod("GET");
		connection.connect();

		int code = connection.getResponseCode();
		System.out.println("Response code of the object is " + code);
		if (code == 200) {
			return true;
		} else
			return false;
	}

	public List<String> readFromExcel(String fileName) {
		List<String> urlArray = new LinkedList<String>();
		int cnt = 0;

		try {


			InputStream input = new BufferedInputStream(
					//new FileInputStream("C:\\misc\\home.xls"));
					new FileInputStream(fileName));

			POIFSFileSystem fs = new POIFSFileSystem(input);
			HSSFWorkbook wb = new HSSFWorkbook(fs);
			HSSFSheet sheet = wb.getSheetAt(0);

			Iterator rows = sheet.rowIterator();

			while (rows.hasNext()) {

				HSSFRow row = (HSSFRow) rows.next();
				System.out.println("\n");
				Iterator cells = row.cellIterator();
				//while( cells.hasNext() ) {

				HSSFCell cell = (HSSFCell) cells.next();
				if (HSSFCell.CELL_TYPE_NUMERIC == cell.getCellType()) {
					//System.out.print( cell.getNumericCellValue()+"     " );
				} else if (HSSFCell.CELL_TYPE_STRING == cell.getCellType()) {
					//System.out.print( cell.getStringCellValue()+"    " );

					urlArray.add(cell.getStringCellValue());
					cnt++;
					//System.out.println(Arrays.asList(urlArray));
				} else if (HSSFCell.CELL_TYPE_BOOLEAN == cell.getCellType())
					System.out.print(cell.getBooleanCellValue() + "     ");

	                   /*else
	                       if(HSSFCell.CELL_TYPE_BLANK==cell.getCellType())
	                           System.out.print( "     " );
	                           else
	                       System.out.print("Unknown cell type");
	                       */

				// }


			}


		} catch (IOException ex) {
			ex.printStackTrace();
		}

		return urlArray;

	}

	public void MailDraft(WebDriver driver, String PageName, String FeildName, String ErrorStatement, String tcID, boolean stop) {

		String dateTimeStr = getCurrentDateTime();
		screenShotCaptureFileName = tcID + "PlaceOrder" + dateTimeStr;
		tcIdFailAry.add(tcID);
		String elementStatus = tcID + EMAIL_ARGUMENTS_DELIMITER
				+ "Fail" + EMAIL_ARGUMENTS_DELIMITER
				+ PageName + EMAIL_ARGUMENTS_DELIMITER
				+ driver.getCurrentUrl() + EMAIL_ARGUMENTS_DELIMITER
				+ elementNotPresent + "placeOrder.btn"
				+ EMAIL_ARGUMENTS_DELIMITER + FeildName + " : "
				+ ErrorStatement + EMAIL_ARGUMENTS_DELIMITER
				+ ErrorStatement.toUpperCase();
		//+ soldOutProductErrorMsg + "["+productName+"]";
		elementStatusAry.add(elementStatus);
		//need to make function

		try {
			captureScreenShot(driver, screenShotCaptureFileName);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		if (stop) {
			Assert.assertEquals("", "BuyNowButton", elementNotPresent
					+ "BuyNowButton");
		} else
			System.out.println("No need to stop the test case for mail");

	}//mail function

	public String GetElementXPath(WebElement element, WebDriver driver) {
		return (String) ((JavascriptExecutor) driver).executeScript(
				"getXPath=function(node)" +
						"{" +
						"if (node.id !== '')" +
						"{" +
						"return '//' + node.tagName.toLowerCase() + '[@id=\"' + node.id + '\"]'" +
						"}" +

						"if (node === document.body)" +
						"{" +
						"return node.tagName.toLowerCase()" +
						"}" +

						"var nodeCount = 0;" +
						"var childNodes = node.parentNode.childNodes;" +

						"for (var i=0; i<childNodes.length; i++)" +
						"{" +
						"var currentNode = childNodes[i];" +

						"if (currentNode === node)" +
						"{" +
						"return getXPath(node.parentNode) + '/' + node.tagName.toLowerCase() +'[' + (nodeCount+1) + ']'" + "}" +

						"if (currentNode.nodeType === 1 && " +
						"currentNode.tagName.toLowerCase() === node.tagName.toLowerCase())" +
						"{" +
						"nodeCount++" +
						"}" +
						"}" +
						"};" +

						"return getXPath(arguments[0]);", element);
	}


}
